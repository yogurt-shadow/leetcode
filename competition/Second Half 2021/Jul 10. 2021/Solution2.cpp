#include <iostream>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <queue>

using ll = long long;

using namespace std;
typedef vector<pair<int, int>> vii;

typedef pair<int, int> pii;


class Solution {
public:
    const int INF = 0x3f3f3f3f;
    int row[4] = {-1, 0, 1, 0};
    int col[4] = {0, 1, 0, -1};


    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int n = maze.size(), m = maze[0].size();
        int x = entrance[0], y = entrance[1];
        queue<pair<int, int>> q;
        q.push({x, y});
        vector<vector<int>> dist(n + 1, vector<int>(m + 1, INF));
        dist[x][y] = 0;

        while(!q.empty()){
            auto [curx, cury] = q.front();
            q.pop();
            if(dist[curx][cury] != 0 && (curx == 0 || curx == n - 1 || cury == 0 || cury == m - 1)){
                return dist[curx][cury];
            }
            for(int i = 0; i < 4; i++){
                int xx = curx + row[i], yy = cury + col[i];
                if(xx >= 0 && xx < n && yy >= 0 && yy < m && maze[xx][yy] == '.' && dist[xx][yy] == INF){
                    dist[xx][yy] = dist[curx][cury] + 1;
                    q.push({xx, yy});
                }
            }
        }
        return -1;
    }
};

int main(){
    Solution s;
    vector<vector<char>> maze = {{"+",".","+",".",".","+",".",".","+",".",".",".","+","+",".",".",".",".","+","."},{
    cout  << s.nearestExit(maze, {17, 15});

    return 0;
}